tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint installs Cloudify on EKS via Helm.

imports:
  - http://cloudify.co/spec/cloudify/6.0.0/types.yaml
  - plugin:cloudify-helm-plugin
  - plugin:cloudify-kubernetes-plugin
  - plugin:cloudify-fabric-plugin
  - plugin:cloudify-aws-plugin?version= >=2.5.6
  - plugin:cloudify-utilities-plugin?version= >=1.22.1

dsl_definitions:
  aws_client: &aws_client
    aws_access_key_id: { get_secret: aws_access_key_id }
    aws_secret_access_key: { get_secret: aws_secret_access_key }
    region_name: { get_input: eks_cluster_region }

inputs:
  eks_cluster_region:
    description: >
      EKS cluster region name.
    default: us-east-2

  agent_user:
    type: string
    default: centos

  agent_key_name:
    type: string
    default: conductor_key

  vpc_cidr:
    type: string
    default: '10.10.0.0/16'

  subnet_1_cidr:
    type: string
    default: '10.10.10.0/24'

  subnet_2_cidr:
    type: string
    default: '10.10.11.0/24'

  subnet_3_cidr:
    type: string
    default: '10.10.12.0/24'

  ami_owner_filter:
    type: string
    description: The AWS AMI owner number.
    default: '125523088429'

  ami_name_filter:
    type: string
    description: The name of the AWS AMI in the AWS region.
    default: 'CentOS 7.9.2009 x86_64'

node_templates:
  vm_1:
    type: cloudify.nodes.aws.ec2.Instances
    properties:
      client_config: *aws_client
      agent_config:
        install_method: none
        user: { get_input: agent_user }
      resource_config:
        ImageId: { get_attribute: [ ami, aws_resource_id ] }
        InstanceType: t2.medium
        kwargs:
          KeyName: { get_attribute: [keypair, create_response, KeyName] }
      use_public_ip: true
    relationships:
      - type: cloudify.relationships.depends_on
        target: ami
      - type: cloudify.relationships.depends_on
        target: nic_1
      - type: cloudify.relationships.depends_on
        target: ip_1
      - type: cloudify.relationships.depends_on
        target: keypair

  vm_2:
    type: cloudify.nodes.aws.ec2.Instances
    properties:
      client_config: *aws_client
      agent_config:
        install_method: none
        user: { get_input: agent_user }
      resource_config:
        ImageId: { get_attribute: [ ami, aws_resource_id ] }
        InstanceType: t2.medium
        kwargs:
          KeyName: { get_attribute: [keypair, create_response, KeyName] }
      use_public_ip: true
    relationships:
      - type: cloudify.relationships.depends_on
        target: ami
      - type: cloudify.relationships.depends_on
        target: nic_2
      - type: cloudify.relationships.depends_on
        target: ip_2
      - type: cloudify.relationships.depends_on
        target: keypair

  vm_3:
    type: cloudify.nodes.aws.ec2.Instances
    properties:
      client_config: *aws_client
      agent_config:
        install_method: none
        user: { get_input: agent_user }
      resource_config:
        ImageId: { get_attribute: [ ami, aws_resource_id ] }
        InstanceType: t2.medium
        kwargs:
          KeyName: { get_attribute: [keypair, create_response, KeyName] }
      use_public_ip: true
    relationships:
      - type: cloudify.relationships.depends_on
        target: ami
      - type: cloudify.relationships.depends_on
        target: nic_3
      - type: cloudify.relationships.depends_on
        target: ip_3
      - type: cloudify.relationships.depends_on
        target: keypair

  generate_cluster_certs:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/generate_cluster_certs.sh
            fabric_env: &fabric_env
              host_string: { get_attribute: [vm_1, public_ip_address] }
              user: { get_input: agent_user }
              key: { get_attribute: [keypair, create_response, KeyMaterial] }
            process:
              cwd: /home/centos
              env:
                VM1_IP_PUBLIC: { get_attribute: [vm_1, public_ip_address] }
                VM2_IP_PUBLIC: { get_attribute: [vm_2, public_ip_address] }
                VM3_IP_PUBLIC: { get_attribute: [vm_3, public_ip_address] }
                VM1_IP_PRIVATE: { get_attribute: [vm_1, private_ip_address] }
                VM2_IP_PRIVATE: { get_attribute: [vm_2, private_ip_address] }
                VM3_IP_PRIVATE: { get_attribute: [vm_3, private_ip_address] }
                REGION: { get_input: eks_cluster_region }
    relationships:
      - type: cloudify.relationships.depends_on
        target: vm_1
      - type: cloudify.relationships.depends_on
        target: vm_2
      - type: cloudify.relationships.depends_on
        target: vm_3
      - type: cloudify.relationships.depends_on
        target: keypair

  upload_certs:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/upload_cluster_certs.sh
            fabric_env:
              host_string: { get_attribute: [vm_2, public_ip_address] }
              user: { get_input: agent_user }
              key: { get_attribute: [keypair, create_response, KeyMaterial] }
            process:
              cwd: /home/centos
              env:
                VM_IP_PUBLIC: { get_attribute: [vm_2, public_ip_address] }
                CA: { get_attribute: [generate_cluster_certs, ca] }
                CRT: { get_attribute: [generate_cluster_certs, vm2, crt] }
                KEY: { get_attribute: [generate_cluster_certs, vm2, key] }
        start:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            script_path: scripts/upload_cluster_certs.sh
            fabric_env:
              host_string: { get_attribute: [vm_3, public_ip_address] }
              user: { get_input: agent_user }
              key: { get_attribute: [keypair, create_response, KeyMaterial] }
            process:
              cwd: /home/centos
              env:
                VM_IP_PUBLIC: { get_attribute: [vm_3, public_ip_address] }
                CA: { get_attribute: [generate_cluster_certs, ca] }
                CRT: { get_attribute: [generate_cluster_certs, vm3, crt] }
                KEY: { get_attribute: [generate_cluster_certs, vm3, key] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: generate_cluster_certs

  keypair:
    type: cloudify.nodes.aws.ec2.Keypair
    properties:
      client_config: *aws_client
      store_in_runtime_properties: true  # should be removed on prod
      create_secret: true
      secret_name: conductor_key
      update_existing_secret: true

  ami:
    type: cloudify.nodes.aws.ec2.Image
    properties:
      resource_config:
        kwargs:
          Filters:
            - Name: name
              Values:
                - { get_input: ami_name_filter }
            - Name: owner-id
              Values:
                - { get_input: ami_owner_filter }
      client_config: *aws_client

  ip_1:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      client_config: *aws_client
    relationships:
      - type: cloudify.relationships.depends_on
        target: nic_1

  ip_2:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      client_config: *aws_client
    relationships:
      - type: cloudify.relationships.depends_on
        target: nic_2

  ip_3:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      client_config: *aws_client
    relationships:
      - type: cloudify.relationships.depends_on
        target: nic_3

  nic_1:
    type: cloudify.nodes.aws.ec2.Interface
    properties:
      client_config: *aws_client
      resource_config:
        kwargs:
          Description: NIC for Conductor cluster
          SubnetId: { get_attribute: [ subnet_1, aws_resource_id ] }
          Groups:
            - { get_attribute: [ security_group, aws_resource_id ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: security_group
      - type: cloudify.relationships.depends_on
        target: subnet_1
      - type: cloudify.relationships.depends_on
        target: internet_gateway

  nic_2:
    type: cloudify.nodes.aws.ec2.Interface
    properties:
      client_config: *aws_client
      resource_config:
        kwargs:
          Description: NIC for Conductor cluster
          SubnetId: { get_attribute: [ subnet_2, aws_resource_id ] }
          Groups:
            - { get_attribute: [ security_group, aws_resource_id ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: security_group
      - type: cloudify.relationships.depends_on
        target: subnet_2
      - type: cloudify.relationships.depends_on
        target: internet_gateway

  nic_3:
    type: cloudify.nodes.aws.ec2.Interface
    properties:
      client_config: *aws_client
      resource_config:
        kwargs:
          Description: NIC for Conductor cluster
          SubnetId: { get_attribute: [ subnet_3, aws_resource_id ] }
          Groups:
            - { get_attribute: [ security_group, aws_resource_id ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: security_group
      - type: cloudify.relationships.depends_on
        target: subnet_3
      - type: cloudify.relationships.depends_on
        target: internet_gateway

  security_group_rules:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
      client_config: *aws_client
      resource_config:
        IpPermissions:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            IpRanges:
              - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            IpRanges:
              - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            IpRanges:
              - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 2379
            ToPort: 2379
            IpRanges:
              - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 2380
            ToPort: 2380
            IpRanges:
              - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            IpRanges:
              - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 8008
            ToPort: 8008
            IpRanges:
              - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 8009
            ToPort: 8009
            IpRanges:
              - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 53333
            ToPort: 53333
            IpRanges:
              - CidrIp: 0.0.0.0/0
    relationships:
      - type: cloudify.relationships.contained_in
        target: security_group

  security_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      client_config: *aws_client
      resource_config:
        GroupName: conductor-cluster-sg
        Description: Security group for Conductor cluster
        VpcId: { get_attribute: [ vpc, aws_resource_id ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  route_public_subnet_internet_gateway:
    type: cloudify.nodes.aws.ec2.Route
    properties:
      resource_config:
        kwargs:
          DestinationCidrBlock: '0.0.0.0/0'
      client_config: *aws_client
    relationships:
      - type: cloudify.relationships.contained_in
        target: routetable
      - type: cloudify.relationships.connected_to
        target: internet_gateway
    interfaces:
      cloudify.interfaces.lifecycle:
        stop: {}

  routetable:
    type: cloudify.nodes.aws.ec2.RouteTable
    properties:
      client_config: *aws_client
    relationships:
      - type: cloudify.relationships.contained_in
        target: vpc
      - type: cloudify.relationships.connected_to
        target: subnet_1
      - type: cloudify.relationships.connected_to
        target: subnet_2
      - type: cloudify.relationships.connected_to
        target: subnet_3

  subnet_1:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      client_config: *aws_client
      resource_config:
        CidrBlock: { get_input: subnet_1_cidr }
        AvailabilityZone: { concat: [ { get_input: eks_cluster_region }, 'a' ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  subnet_2:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      client_config: *aws_client
      resource_config:
        CidrBlock: { get_input: subnet_2_cidr }
        AvailabilityZone: { concat: [ { get_input: eks_cluster_region }, 'b' ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  subnet_3:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      client_config: *aws_client
      resource_config:
        CidrBlock: { get_input: subnet_3_cidr }
        AvailabilityZone: { concat: [ { get_input: eks_cluster_region }, 'c' ] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  internet_gateway:
    type: cloudify.nodes.aws.ec2.InternetGateway
    properties:
      client_config: *aws_client
    relationships:
      - type: cloudify.relationships.connected_to
        target: vpc

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      resource_config:
        CidrBlock: { get_input: vpc_cidr }
      client_config: *aws_client
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: aws.cloudify_aws.ec2.resources.vpc.create
          inputs:
            modify_vpc_attribute_args:
              EnableDnsSupport:
                Value: True
        poststart:
          implementation: aws.cloudify_aws.ec2.resources.vpc.modify_vpc_attribute
          inputs:
            resource_config:
              EnableDnsHostnames:
                Value: True

capabilities:
  vm_1_private_ip:
    value: { get_attribute: [vm_1, private_ip_address] }

  vm_1_public_ip:
    value: { get_attribute: [vm_1, public_ip_address] }

  vm_2_private_ip:
    value: { get_attribute: [vm_2, private_ip_address] }

  vm_2_public_ip:
    value: { get_attribute: [vm_2, public_ip_address] }

  vm_3_private_ip:
    value: { get_attribute: [vm_3, private_ip_address] }

  vm_3_public_ip:
    value: { get_attribute: [vm_3, public_ip_address] }
